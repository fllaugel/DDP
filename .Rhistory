qpois(.95,
| lambda)
qpois(.95, lambda)
mdl2 <- log(visits+1)
mdl2 <- glm(visits ~ date, poisson, hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset =log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
load(mtcars)
load("mtcars")
head(mtcars)
x <- mtcars$weight
y <- mtcars$mpg
fit <- lm(y ~x)
fit <- lm(y ~x, mtcars)
fit <- lm(y ~ x, data=mtcars)
x <- mtcars$wt
fit <- lm(y ~x, mtcars)
xmean <- mean(x)
p1 <- predict(fit, xmean, interval = ("confidence")
p1 <- predict(fit, xmean, interval = ("confidence"))
p1
newdata <- data.frame(x = xmean)
p1 <- predict(fit, newdata, interval = ("confidence"))
p1
summary(fit)
newdata <- data.frame(x = 3.0)
p1 <- predict(fit, newdata, interval = ("confidence"))
p1
p1 <- predict(fit, newdata, interval = ("prediction"))
p1
newdata <- data.frame(x = 2.0)
fit <- lm(y ~ I(x*2), mtcars)
summary(fit)
fit <- lm(y ~ I(x/2), mtcars)
summary(fit)
newdata <- data.frame(x = 1.0)
p1 <- predict(fit, newdata, interval = ("confidence"))
p1
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sum(resid(fit\))
sum(resid(fit))
fit <- lm(y ~ x, -1, mtcars)
fit <- lm(y ~ x, -, mtcars)
fit <- lm(y ~ x, 1, mtcars)
fit <- lm(y ~ x -1, mtcars)
sum(resid(fit))
predict(fit)
pnorm(.05)
pnorm(0)
dnorm(o)
dnorm(0)
dnorm(2.33)
qnorm(o)
qnorm(0)
qnorm(0.05,mean=0, sd=1, lower.tal=FALSE)
qnorm(0.05,mean=0, sd=1, lower.tail=FALSE)
qnorm(0.01,mean=0, sd=1, lower.tail=FALSE)
qnorm(0.005,mean=0, sd=1, lower.tail=FALSE)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
summary(diagnosis)
adData = data.frame(predictors)
adData = data.frame(diagnosis,predictors)
head(abData)
summary(abData)
summary(adData)
head(adData)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(SuperPlasticiser)
hist(SuperPlasticizer)
hist(mixtures$SuperPlasticizer)
View(mixtures)
View(mixtures)
mean(mixtures$Superplasticizer)
hist(mixtures$SuperPlasticizer)
plot(mixtures$SuperPlasticizer)
x <- c(mixtures$Superplasticizer)
mean(x)
hist(x)
y <- log(x)
hist(y)
log(0)
hist(x)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(testing)
View(testing)
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.9)
preObj
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
suppressMessages(library(dplyr))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
names(new_testing)
# compute the model with non_pca predictors
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
suppressMessages(library(dplyr))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
suppressMessages(library(dplyr))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
names(new_testing)
# compute the model with non_pca predictors
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.9)
preObj
# compute the model with non_pca predictors
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal(inTrain)
training <- segmentationOriginal(inTrain,)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal(-inTrain,)
testing <- segmentationOriginal[-inTrain,]
dim(training); dim(testing)
set.seed(125)
testing <- segmentationOriginal[-inTrain,]
training <- segmentationOriginal[inTrain,]
modFit <- train(Case ~., method="rpart", data=training)
install.packages("e1071")
modFit <- train(Case ~., method="rpart", data=training)
plot(modFit$finalModel, uniform=TRUE, main="Tree")
plot(modFit$finalModel, uniform=TRUE, main="Tree")
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
predict(modFit,TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
View(testing)
View(testing)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(model.fit)
fancyRpartPlot(modFit)
setwd("C:/misdatos/md4/Consultorias/OCEANIA/SISSARIL/FASE II/CURSO STAFF/CURSO DE R/MATERIAL/DATOS")
df <- data.frame(nombre=c("Elias", "Milkeya", "Federico", "Madeline"),
Edad = c(27,34,40,39),
poblacion=c("Moca", "Bani", "Santiago", "Ocoa"),
Sexo=c("H","M","H","M"),
Casado=c(F,T,T,F))
df
View(df)
View(df)
z <- seq(1,100, by=2)
dim(z) <- c(5,10)
z
dim(z, byrow) <- c(5,10)
dim(z) <- c(5,10) byrow
a <- matrix(z , byrow=TRUE)
a
a[5,10] <- matrix(z , byrow=TRUE)
a <- matrix(dim(z) , byrow=TRUE)
a
a >- matrix(seq(1,100, by=2), nrow=10, ncol=5, byrow=TRUE)
a >- matrix(c(seq(1,100, by=2)), nrow=10, ncol=5, byrow=TRUE)
a >- matrix(seq(1,100, by=2), nrow=10, ncol=5, byrow=TRUE)
a <- matrix(seq(1,100, by=2), nrow=10, ncol=5, byrow=TRUE)
a
x <- seq(-6,6, by=0.1)
plot(x,dnorm(x), type="l", xlim=c(-6,6), ylim=c(0,0.9))
lines(x,dnorm(x,mean=0,sd=2), col="red")
lines(x,dnorm(x,mean=3,sd=0.5), col="blue")
x <- seq(0,40,by=0.01)
curve(dgamma(x,shape=2, scale=3), from=0, to=40)
abline(v=2*3, lty =2)
abline(v=2*3, lty =3)
abline(v=2*3, lty =8)
abline(v=2*3, lty =8)
curve(dgamma(x,shape=2, scale=3), from=0, to=40)
abline(v=2*3, lty =8)
abline(v=2*3, lty =5)
x <- 0:20
plot(x, dpois(x,lambda=4), type="h")
plot(x,ppois(x,lambda=4), type="s")
plot(x,ppois(x,lambda=4), type="l")
data(quakes)
hist(quakes$depth,prob=TRUE)
lines(density(quakes$depth, bw=50))
library(actuar)             # Paquete Actuarial
library(MASS)
fx <- c(0, 0.15, 0.2, 0.25, 0.125, 0.075,
0.05, 0.05, 0.05, 0.025, 0.025)
pn <- c(0.05, 0.1, 0.15, 0.2, 0.25, 0.15, 0.06, 0.03, 0.01)
Fs <- aggregateDist("convolution", model.freq = pn,
model.sev = fx, x.scale = 25)
summary(Fs)
c(Fs(0), diff(Fs(25 * 0:21))) # probability mass function
plot(Fs)
## Simulation method
library(actuar)             # Paquete Actuarial
library(MASS)
model.freq <- expression(data = rpois(3))
model.sev <- expression(data = rgamma(100, 2))
Fs <- aggregateDist("simulation", nb.simul = 10000,
model.freq, model.sev)
mean(Fs)
plot(Fs)
x <- seq(-6,6, by=0.1)
df <- data.frame(nombre=c("Elias", "Milkeya", "Federico", "Madeline"),
Edad = c(27,34,40,39),
poblacion=c("Moca", "Bani", "Santiago", "Ocoa"),
Sexo=c("H","M","H","M"),
Casado=c(F,T,T,F))
View(df)
View(df)
edit(df)
x <- seq(0,40,by=0.01)
x
(dgamma(x,shape=2, scale=3), from=0, to=40)
curve(dgamma(x,shape=2, scale=3), from=0, to=40)
curve(dgamma(x,shape=3, scale=3), from=0, to=40)
abline(v=2*3, lty =2)
abline(v=25, lty =2)
install.packages("actuar")
library(actuar)
x <- 0:20
plot(x, dpois(x,lambda=4), type="h")
plot(x,ppois(x,lambda=4), type="s")
data(quakes)
head(quakes)
hist(quakes$depth,prob=TRUE)
hist(quakes$depth,prob=FALSE)
hist(quakes$depth,prob=TRUE)
hist(quakes$depth,prob=FALSE)
hist(quakes$depth,prob=TRUE)
lines(density(quakes$depth, bw=50))
lines(density(quakes$depth, bw=5))
confusionMatrix(vowel.test$y, rf.result)$overall['Accuracy']
library(ElemStatLearn)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
suppressMessages(library(caret))
set.seed(33833)
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
gbmmodel <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
confusionMatrix(vowel.test$y, rf.result)$overall['Accuracy']
suppressMessages(library(caret))
set.seed(33833)
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
gbmmodel <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
rf.result <- predict(rfmodel, vowel.test)
gbm.result <- predict(gbmmodel, vowel.test)
confusionMatrix(vowel.test$y, rf.result)$overall['Accuracy']
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmodel <- suppressMessages(train(diagnosis~., data=training, method="rf"))
gbmmodel <- suppressMessages(train(diagnosis~., data=training, method="gbm"))
ldamodel <- suppressMessages(train(diagnosis~., data=training, method="lda"))
rfresult <- predict(rfmodel, testing)
gbmresult <- predict(gbmmodel, testing)
ldaresult <- predict(ldamodel, testing)
combined.data <- data.frame(rfresult, gbmresult, ldaresult, diagnosis=testing$diagnosis)
combined.model <- train(diagnosis~., data=combined.data, method="rf")
combined.result <- predict(combined.model, testing)
confusionMatrix(testing$diagnosis, rfresult)$overall['Accuracy']
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lasso.model <- train(CompressiveStrength~., data=training, method="lasso")
setwd("C:/misdatos/md4/Consultorias/OCEANIA/SISSARIL/FASE II/PRUEBA/DATOS NUEVOS/FOLDER DE TRABAJO")
install.packages("shiny")
library("shiny", lib.loc="~/R/win-library/3.1")
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT")
runApp()
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
runApp()
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT/www")
runApp()
runApp()
runApp()
runApp()
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
runApp()
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT")
runApp()
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT/www")
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
runApp()
runApp()
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT/www/path/to/your/app")
runApp()
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
runApp()
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT/www")
runApp()
library(shinyapps)
shinyapps::deployApp('www')
library(shinyapps)
shinyapps::deployApp(www)
library(shinyapps)
shinyapps::deployApp('www')
library(shinyapps)
shinyapps::deployApp('C:\misdatos\md4\DATA SCIENCE\DEVELOPING DATA PRODUCTS\PROJECT\www')
library(shinyapps)
shinyapps::deployApp(C:\misdatos\md4\DATA SCIENCE\DEVELOPING DATA PRODUCTS\PROJECT\www)
library(shinyapps)
shinyapps::deployApp('www')
library(shinyapps)
shinyapps::deployApp('www')
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT")
library(shinyapps)
shinyapps::deployApp('www')
runApp()
deployApp(appName="APPNAME")
deployApp(appName="app.R")
runApp()
library(shinyapps)
shinyapps::deployApp('www')
deployApp(appName="app.R")
deployApp(appName="app")
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT/www")
deployApp(appName="app")
deployApp(appName="app")
runApp()
> library(shinyapps)
> shinyapps::deployApp('www')
library(shinyapps)
shinyapps::deployApp('www')
library(shinyapps)
shinyapps::deployApp('www')
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT")
library(shinyapps)
shinyapps::deployApp('www')
library(shinyapps)
shinyapps::deployApp('app')
library(shinyapps)
shinyapps::deployApp('app.R')
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT/www")
library(shinyapps)
shinyapps::deployApp('app.R')
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT")
library(shinyapps)
shinyapps::deployApp('www')
library(shiny)
runApp()
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT/www")
runApp()
getwd()
library(shiny)
runApp()
runApp()
shinyUI(pageWithSidebar(
headerPanel("Data Science FTW"),
library(shiny)
runApp()
shinyUI(pageWithSidebar(
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
library(shinyapps)
shinyapps::deployApp('www')
library(shinyapps)
shinyapps::deployApp('app')
library(shinyapps)
shinyapps::deployApp('app.R')
library(shiny)
runApp()
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
demo(googleVis)
library(googleVis)
install.packages("googleVis")
demo(googleVis)
library(googleVis)
demo(googleVis)
library(devtools)
install.packages("Rtools")
library(devtools)
install.packages("rtools")
install.packages("C:/Users/fllau_000/Downloads/Rtools32.exe", repos = NULL)
install_github('slidify' , 'ramnathv')
library(slidify)
install_github('slidify' , 'ramnathv')
install_github('slidify','ramnathv')
install_github('slidify','ramnathv')
install.packages("devtools")
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
library(slidify)
install_github('slidify','ramnathv')
install.packages("rtools")
install_github('slidify','ramnathv')
setwd("C:/misdatos/md4/DATA SCIENCE/DEVELOPING DATA PRODUCTS/PROJECT/DDP")
GETWD()
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp(appName="app")
shini::depliy()
shinyapps()
library(shinyapps)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
